name: C++ Workflow
run-name: ${{github.actor}} ran workflow
on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        brew install cpprestsdk
        brew install openssl
        brew install pkg-config
        brew install libpqxx
        brew install boost

    - name: Compile the Project
      run: |
        cmake .
        make

    - name: Clear build files (Development)
      run: rm -rf CMakeFiles cmake_install.cmake CMakeCache.txt Makefile

    - name: Run Unit Tests
      run: ./unit_test
      
    - name: Run End to End Tests
      run: ./end_test -s

    - name: Style Check (cpplint)
      run: python3 styler_checker/run_cpplint.py . styler_checker/cpplint.py

    - name: Clang Format Check
      run: |
        find . -regex '.*\.\(cpp\|h\)' -exec clang-format -i -style=file {} \;

    - name: Clang Tidy Check
      run: |
        find . -regex '.*\.\(cpp\|h\)' | xargs clang-tidy -p build/

    - name: Install cppcheck
      run: brew install cppcheck

    - name: Run cppcheck
      run: cppcheck --enable=all --std=c++17 . --output-file=reports/static_analysis+report.txt
    
    - name: Run Unit Tests with Branch Coverage
      run: |
        rm -rf CMakeFiles cmake_install.cmake CMakeCache.txt Makefile
        cmake -DCODE_COVERAGE=ON .
        make
        ./unit_test
        xcrun llvm-profdata merge -sparse default.profraw -o coverage.profdata
        xcrun llvm-cov report -instr-profile=coverage.profdata ./unit_test

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage.profdata
    # - name: Install coverage tools
    #   run: |
    #     brew install lcov

    # - name: Build and Test with Coverage
    #   run: |
    #     cmake -DCODE_COVERAGE=ON .
    #     make
    #     ./unit_test
    #     lcov --capture --directory . --output-file coverage.info
    #     lcov --remove coverage.info '/usr/*' --output-file coverage.info
    #     lcov --list coverage.info
    #     lcov --extract coverage.info '${{github.workspace}}/*' --output-file coverage.filtered.info
    #     lcov --list coverage.filtered.info

    # - name: Upload coverage to a coverage reporting service
    #   run: |
    #     # Use a service like codecov or coveralls to upload and visualize coverage


  # deploy:
  #   needs: build-and-test
  #   runs-on: macos-latest
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #   - name: Install sshpass
  #     run: |
  #       brew install hudochenkov/sshpass/sshpass
  #       brew install cmake

  #   - name: SSH and Deploy
  #     env:
  #       SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  #     run: |
  #       sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no -p 11376 sjkdan@8.tcp.ngrok.io '
  #         cd /Users/sjkdan/Desktop/ase2023/ASE4156 && ls &&
  #         git pull && cmake . &&
  #         make &&
  #         ./server'
